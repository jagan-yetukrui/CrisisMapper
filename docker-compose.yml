# CrisisMapper Docker Compose Configuration
version: "3.8"

services:
  # Main API service
  crisismapper-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: app
    container_name: crisismapper-api
    ports:
      - "8000:8000"
    environment:
      - CRISIS_MAPPER_DEBUG=false
      - CRISIS_MAPPER_DEVICE=cuda
      - JWT_SECRET_KEY=your-secret-key-change-in-production
      - DATABASE_URL=postgresql://crisismapper:password@postgres:5432/crisismapper
      - REDIS_URL=redis://redis:6379
      - MODEL_PATH=/app/models
      - DATA_PATH=/app/data
      - RESULTS_PATH=/app/results
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./results:/app/results
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - crisismapper-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Streamlit Dashboard
  crisismapper-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: app
    container_name: crisismapper-dashboard
    ports:
      - "8501:8501"
    command:
      [
        "streamlit",
        "run",
        "dashboard.py",
        "--server.port=8501",
        "--server.address=0.0.0.0",
      ]
    environment:
      - CRISIS_MAPPER_DEBUG=false
      - API_BASE_URL=http://crisismapper-api:8000
    volumes:
      - ./data:/app/data
      - ./results:/app/results
      - ./uploads:/app/uploads
    depends_on:
      - crisismapper-api
    networks:
      - crisismapper-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: crisismapper-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=crisismapper
      - POSTGRES_USER=crisismapper
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - crisismapper-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crisismapper -d crisismapper"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: crisismapper-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass password
    volumes:
      - redis_data:/data
    networks:
      - crisismapper-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: crisismapper-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - crisismapper-api
      - crisismapper-dashboard
    networks:
      - crisismapper-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: crisismapper-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - crisismapper-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: crisismapper-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - crisismapper-network
    restart: unless-stopped

  # Jupyter Notebook (Development)
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: jupyter
    container_name: crisismapper-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=changeme
    volumes:
      - ./notebooks:/app/notebooks
      - ./data:/app/data
      - ./results:/app/results
    networks:
      - crisismapper-network
    restart: unless-stopped
    profiles:
      - development

  # Model Training Service
  model-trainer:
    build:
      context: .
      dockerfile: Dockerfile
      target: app
    container_name: crisismapper-trainer
    command: ["python", "scripts/train_model.py"]
    environment:
      - CRISIS_MAPPER_DEBUG=false
      - CRISIS_MAPPER_DEVICE=cuda
      - DATABASE_URL=postgresql://crisismapper:password@postgres:5432/crisismapper
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      - postgres
    networks:
      - crisismapper-network
    restart: "no"
    profiles:
      - training

  # Data Processing Service
  data-processor:
    build:
      context: .
      dockerfile: Dockerfile
      target: app
    container_name: crisismapper-processor
    command: ["python", "scripts/process_data.py"]
    environment:
      - CRISIS_MAPPER_DEBUG=false
      - DATABASE_URL=postgresql://crisismapper:password@postgres:5432/crisismapper
    volumes:
      - ./data:/app/data
      - ./results:/app/results
      - ./logs:/app/logs
    depends_on:
      - postgres
    networks:
      - crisismapper-network
    restart: "no"
    profiles:
      - processing

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: app
    container_name: crisismapper-celery-worker
    command: ["celery", "-A", "src.tasks.celery_app", "worker", "--loglevel=info"]
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DATABASE_URL=postgresql://crisismapper:password@postgres:5432/crisismapper
    volumes:
      - ./data:/app/data
      - ./results:/app/results
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - crisismapper-network
    restart: unless-stopped
    profiles:
      - production

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: app
    container_name: crisismapper-celery-beat
    command: ["celery", "-A", "src.tasks.celery_app", "beat", "--loglevel=info"]
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DATABASE_URL=postgresql://crisismapper:password@postgres:5432/crisismapper
    volumes:
      - ./data:/app/data
      - ./results:/app/results
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - crisismapper-network
    restart: unless-stopped
    profiles:
      - production

  # Flower (Celery Monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: app
    container_name: crisismapper-flower
    ports:
      - "5555:5555"
    command: ["celery", "-A", "src.tasks.celery_app", "flower", "--port=5555"]
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      - crisismapper-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  crisismapper-network:
    driver: bridge